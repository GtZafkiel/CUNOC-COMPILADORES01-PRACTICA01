
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zafkiel.practica001.analizadores;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\013\005\000\002" +
    "\004\006\000\002\004\006\000\002\004\004\000\002\012" +
    "\005\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\030\003\015\021\005\022\017\023\021\024" +
    "\013\025\014\026\004\027\016\030\011\031\012\034\022" +
    "\001\002\000\032\002\uffee\003\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\034\uffee\001\002\000\032\002\uffec\003\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\034\uffec\001\002\000\032\002\000\003\077\021" +
    "\070\022\100\023\101\024\074\025\076\026\071\027\016" +
    "\030\073\031\075\034\022\001\002\000\032\002\ufffc\003" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\034\ufffc\001\002\000\004\002" +
    "\067\001\002\000\032\002\ufffa\003\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\034\ufffa\001\002\000\032\002\ufff8\003\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\034\ufff8\001\002\000\032\002\ufff2\003\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\034\ufff2\001\002\000\032\002\ufff0" +
    "\003\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\034\ufff0\001\002\000\032" +
    "\002\uffea\003\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\034\uffea\001\002" +
    "\000\006\003\061\011\062\001\002\000\032\002\ufff6\003" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\034\ufff6\001\002\000\032\002" +
    "\ufffe\003\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\034\ufffe\001\002\000" +
    "\032\002\ufff4\003\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\034\ufff4\001" +
    "\002\000\004\013\023\001\002\000\020\003\025\004\024" +
    "\005\031\011\027\032\033\033\032\034\026\001\002\000" +
    "\006\032\060\033\057\001\002\000\046\002\uffd3\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\034\uffd3\001\002\000\046\002\uffde\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\034\uffde\001\002\000\020\003\025" +
    "\004\024\005\031\011\027\032\033\033\032\034\026\001" +
    "\002\000\044\002\uffe9\003\uffe9\004\036\005\040\006\042" +
    "\007\041\010\037\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\034\uffe9\001\002" +
    "\000\006\032\035\033\034\001\002\000\046\002\uffdf\003" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\034\uffdf\001\002\000\046\002\uffe0" +
    "\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\034\uffe0\001\002\000\046\002" +
    "\uffe1\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\012\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\034\uffe1\001\002\000\046" +
    "\002\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\034\uffe2\001\002\000" +
    "\006\032\054\033\053\001\002\000\006\032\052\033\051" +
    "\001\002\000\006\032\050\033\047\001\002\000\006\032" +
    "\046\033\045\001\002\000\006\032\044\033\043\001\002" +
    "\000\046\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\012\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\034\uffd8\001" +
    "\002\000\046\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\012\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\034\uffd9" +
    "\001\002\000\046\002\uffd6\003\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\012\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\034" +
    "\uffd6\001\002\000\046\002\uffd7\003\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\012\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\034\uffd7\001\002\000\046\002\uffda\003\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\012\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\034\uffda\001\002\000\046\002\uffdb\003\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\034\uffdb\001\002\000\046\002\uffd4\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\034\uffd4\001\002\000\046\002\uffd5\003\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\034\uffd5\001\002\000\046\002\uffdc\003" +
    "\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\034\uffdc\001\002\000\046\002\uffdd" +
    "\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\034\uffdd\001\002\000\016\004" +
    "\036\005\040\006\042\007\041\010\037\012\056\001\002" +
    "\000\046\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\012\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\034\uffe5\001" +
    "\002\000\046\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\012\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\034\uffe3" +
    "\001\002\000\046\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\012\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\034" +
    "\uffe4\001\002\000\032\002\uffe6\003\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\034\uffe6\001\002\000\022\003\025\004\024\005\031" +
    "\011\027\032\033\033\032\034\026\035\063\001\002\000" +
    "\004\012\066\001\002\000\016\004\036\005\040\006\042" +
    "\007\041\010\037\012\065\001\002\000\032\002\uffe7\003" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\034\uffe7\001\002\000\032\002" +
    "\uffe8\003\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\034\uffe8\001\002\000" +
    "\004\002\001\001\002\000\032\002\uffed\003\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\034\uffed\001\002\000\032\002\uffef\003\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\034\uffef\001\002\000\032\002\ufffd" +
    "\003\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\034\ufffd\001\002\000\032" +
    "\002\ufffb\003\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\034\ufffb\001\002" +
    "\000\032\002\ufff3\003\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\034\ufff3" +
    "\001\002\000\032\002\ufff9\003\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\034\ufff9\001\002\000\032\002\ufff1\003\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\034\ufff1\001\002\000\032\002\uffeb\003\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\034\uffeb\001\002\000\032\002\ufff7\003" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\034\ufff7\001\002\000\032\002" +
    "\ufff5\003\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\034\ufff5\001\002\000" +
    "\032\002\uffff\003\uffff\021\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\034\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\012\002\007\003\005\004\017\013\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\101" +
    "\013\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int contador = 0;
    int contador2 = 0;
    int contador3 = 0;
    String resultadoActual = "";
    String resultadoCadena = "";        
    public static String instruccionesMark = "";
    private static List<String> instruccionSintactica = new ArrayList<>();
    public static List<String> getInstruccionSintactica() {
        return instruccionSintactica;
    }
    private static List<String> sintacticos = new ArrayList<>();
    public static List<String> getSintacticos() {
        return sintacticos;
    }
    private static List<String> sintacticos2 = new ArrayList<>();
    public static List<String> getSintacticos2() {
        return sintacticos2;
    }
    private static List<String> sintacticosErrores = new ArrayList<>();
    public static List<String> getSintacticosErrores() {
        return sintacticosErrores;
    }
    private static List<String> sintacticosErrores2 = new ArrayList<>();
    public static List<String> getSintacticosErrores2() {
        return sintacticosErrores2;
    }
    private static HashMap<String, String> tablaSimbolos = new HashMap<>();
    public static HashMap<String, String> getTablaSimbolos() {
        return tablaSimbolos;
    }
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        sintacticosErrores2.add("--->   ERROR SINTACTICO RECUPERADO!!!                   Lexema: "+lexema+"                   Linea:"+fila+"                   Columna: "+columna+"\n");
    }
    public void unrecovered_syntax_error(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    sintacticosErrores2.add  ("--->   ERROR SINTACTICO MODO PANICO!!!                   Lexema: "+lexema+"                   Linea:"+fila+"                   Columna: "+columna+"\n");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TEXTO 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TEXTO ::= TEXTO IMPRIMIR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TEXTO ::= IMPRIMIR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TEXTO ::= TEXTO DECLARACION_VARIABLE_01 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TEXTO ::= DECLARACION_VARIABLE_01 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TEXTO ::= TEXTO FORMAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN FORMAT          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TEXTO ::= FORMAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN FORMAT          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TEXTO ::= TEXTO PLOT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN PLOT          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TEXTO ::= PLOT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN PLOT          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TEXTO ::= TEXTO LISTA_ORDENADA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN LISTA ORDENADA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TEXTO ::= LISTA_ORDENADA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN LISTA ORDENADA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TEXTO ::= TEXTO LISTA_NO_ORDENADA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN LISTA NO ORDENADA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TEXTO ::= LISTA_NO_ORDENADA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN LISTA NO ORDENADA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TEXTO ::= TEXTO TEXTO_ITALICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN ITALICA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TEXTO ::= TEXTO_ITALICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN ITALICA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TEXTO ::= TEXTO TEXTO_NEGRITA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN NEGRITA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TEXTO ::= TEXTO_NEGRITA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN NEGRITA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TEXTO ::= TEXTO TEXTO_NEGRITA_ITALICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN NEGRITA E ITALICA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TEXTO ::= TEXTO_NEGRITA_ITALICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: TEXTO EN NEGRITA E ITALICA          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TEXTO ::= TEXTO HEADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: HEADER          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TEXTO ::= HEADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
    contador++;
    sintacticos.add(a);
    instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: HEADER          Ocurrencia: "+a+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TEXTO ::= TEXTO error 
            {
              String RESULT =null;
		  
    sintacticosErrores.add("---> Contador: "+contador2+"          ERROR SINTÁCTICO en TEXTO: Se ignoró un error y se continúa con la siguiente instrucción.\n");  

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TEXTO ::= error 
            {
              String RESULT =null;
		  
    contador2++;
    sintacticosErrores.add("---> Contador: "+contador2+"          ERROR SINTÁCTICO: Se detectó un error inesperado, pero el análisis continúa.\n");  

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_VARIABLE_01 ::= IDENTIFICADOR IGUAL OPERACIONES_MATEMATICAS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_01",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IMPRIMIR ::= PRINT PARA CADENA PARB 
            {
              String RESULT =null;
		int cad001left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int cad001right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String cad001 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
contador++;
sintacticos.add(cad001);
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE IMPRIMIO UNA INSTRUCCION          Ocurrencia: "+cad001+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMPRIMIR ::= PRINT PARA OPERACIONES_MATEMATICAS PARB 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
contador++;
sintacticos.add(resultadoActual);
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE IMPRIMIO UNA OPERACION         Ocurrencia: "+resultadoActual+"\n" );

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMPRIMIR ::= PRINT error 
            {
              String RESULT =null;
		 contador2++; sintacticosErrores.add("---> Contador: "+contador2+"          ERROR dentro de PRINT, se ignoró un error.\n"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACIONES_MATEMATICAS ::= PARA OPERACIONES_MATEMATICAS PARB 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIONES_MATEMATICAS ::= MAS ENTERO 
            {
              String RESULT =null;
		int oper001left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper001right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper001 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION SUMA         Ocurrencia: + "+oper001+"\n" );
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE REALIZO UNA OPERACION SUMA         Ocurrencia: + "+oper001+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(oper001)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACIONES_MATEMATICAS ::= MAS DECIMAL 
            {
              String RESULT =null;
		int oper001left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper001right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper001 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION SUMA         Ocurrencia: + "+oper001+"\n" );
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE REALIZO UNA OPERACION SUMA         Ocurrencia: + "+oper001+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(oper001)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACIONES_MATEMATICAS ::= MENOS ENTERO 
            {
              String RESULT =null;
		int oper001left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper001right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper001 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION RESTA         Ocurrencia: - "+oper001+"\n" );
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE REALIZO UNA OPERACION RESTA         Ocurrencia: - "+oper001+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(oper001)*-1); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACIONES_MATEMATICAS ::= MENOS DECIMAL 
            {
              String RESULT =null;
		int oper001left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper001right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper001 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION RESTA         Ocurrencia: - "+oper001+"\n" );
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE REALIZO UNA OPERACION RESTA         Ocurrencia: - "+oper001+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(oper001)*-1); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACIONES_MATEMATICAS ::= ENTERO 
            {
              String RESULT =null;
		int oper001left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper001right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper001 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE DECLARO UN ENTERO         Ocurrencia: "+oper001+"\n" );
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE DECLARO UN ENTERO         Ocurrencia: "+oper001+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(oper001)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACIONES_MATEMATICAS ::= DECIMAL 
            {
              String RESULT =null;
		int oper001left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper001right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper001 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE DECLARO UN DECIMAL         Ocurrencia: "+oper001+"\n" );
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE DECLARO UN DECIMAL         Ocurrencia: "+oper001+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(oper001)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACIONES_MATEMATICAS ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int id001left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int id001right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String id001 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE DECLARO UN IDENTIFICADOR         Ocurrencia: "+id001+"\n" );
instruccionSintactica.add("---> Contador: "+contador+"          Ejecucion: SE DECLARO UN IDENTIFICADOR         Ocurrencia: "+id001+"\n" );
resultadoActual = id001; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS MAS ENTERO 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION SUMA         Ocurrencia: "+resultadoActual+" + "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION SUMA         Ocurrencia: "+resultadoActual+" + "+oper002+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(resultadoActual) + Double.parseDouble(oper002)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS MAS DECIMAL 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION SUMA         Ocurrencia: "+resultadoActual+" + "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION SUMA         Ocurrencia: "+resultadoActual+" + "+oper002+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(resultadoActual) + Double.parseDouble(oper002)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS MENOS ENTERO 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION RESTA         Ocurrencia: "+resultadoActual+" - "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION RESTA         Ocurrencia: "+resultadoActual+" - "+oper002+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(resultadoActual) - Double.parseDouble(oper002)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS MENOS DECIMAL 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION RESTA         Ocurrencia: "+resultadoActual+" - "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION RESTA         Ocurrencia: "+resultadoActual+" - "+oper002+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(resultadoActual) - Double.parseDouble(oper002)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS POR ENTERO 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION MULTIPLICACION         Ocurrencia: "+resultadoActual+" * "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION MULTIPLICACION         Ocurrencia: "+resultadoActual+" * "+oper002+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(resultadoActual) * Double.parseDouble(oper002)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS POR DECIMAL 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION MULTIPLICACION         Ocurrencia: "+resultadoActual+" * "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION MULTIPLICACION         Ocurrencia: "+resultadoActual+" * "+oper002+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(resultadoActual) * Double.parseDouble(oper002)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS DIV ENTERO 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION DIVICION         Ocurrencia: "+resultadoActual+" / "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION DIVICION         Ocurrencia: "+resultadoActual+" / "+oper002+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(resultadoActual) / Double.parseDouble(oper002)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS DIV DECIMAL 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION DIVICION         Ocurrencia: "+resultadoActual+" / "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION DIVICION         Ocurrencia: "+resultadoActual+" / "+oper002+"\n" );
resultadoActual = String.valueOf(Double.parseDouble(resultadoActual) / Double.parseDouble(oper002)); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS POTENCIA ENTERO 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION POTENCIA         Ocurrencia: "+resultadoActual+" ^ "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION POTENCIA         Ocurrencia: "+resultadoActual+" ^ "+oper002+"\n" );
resultadoActual = String.valueOf(Math.pow(Double.parseDouble(resultadoActual), Double.parseDouble(oper002))); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACIONES_MATEMATICAS ::= OPERACIONES_MATEMATICAS POTENCIA DECIMAL 
            {
              String RESULT =null;
		int oper002left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oper002right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String oper002 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
contador3++;
contador++;
sintacticos2.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION POTENCIA         Ocurrencia: "+resultadoActual+" ^ "+oper002+"\n" );
instruccionSintactica.add("---> Contador: "+contador3+"          Ejecucion: SE REALIZO UNA OPERACION POTENCIA         Ocurrencia: "+resultadoActual+" ^ "+oper002+"\n" );
resultadoActual = String.valueOf(Math.pow(Double.parseDouble(resultadoActual), Double.parseDouble(oper002))); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACIONES_MATEMATICAS ::= error 
            {
              String RESULT =null;
		  
    contador2++;
    sintacticosErrores.add("---> Contador: "+contador2+"          ERROR SINTÁCTICO en OPERACIONES MATEMÁTICAS: Se ignoró un error en una operación.\n");  

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_MATEMATICAS",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
